from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import logging
import json
from datetime import datetime

from config import BOT_TOKEN, DAILY_WATER_NORM
from sheets import get_weekly_stats, save_day_results

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class WaterForm(StatesGroup):
    waiting = State()        # –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    amount = State()         # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã
    norm = State()           # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥"""
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="üíß –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É"),
                types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ],
            [
                types.KeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ—Ä–º—É"),
                types.KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
            ]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user_data(user_id):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {
            "today_logs": [],
            "total_today": 0,
            "daily_norm": DAILY_WATER_NORM
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–æ–≤—ã–π –ª–∏ –¥–µ–Ω—å
    today = datetime.now().strftime("%Y-%m-%d")
    last_log_date = None
    
    if user_data[user_id]["today_logs"]:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            last_log = user_data[user_id]["today_logs"][-1]
            if "date" in last_log:
                last_log_date = last_log["date"]
        except (IndexError, KeyError):
            pass
    
    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if last_log_date != today:
        user_data[user_id]["today_logs"] = []
        user_data[user_id]["total_today"] = 0
    
    return user_data[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    init_user_data(user_id)
    user_data = init_user_data(user_id)
    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data}")
    
    await state.set_state(WaterForm.waiting)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —Å ID {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        f"–Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –æ –ø–∏—Ç—å–µ –≤–æ–¥—ã. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è "
        f"–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–≤–∞–ª(–∞) –ø–∏—Ç—å –≤–æ–¥—É.\n\n"
        f"–¢–≤–æ—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {DAILY_WATER_NORM} –º–ª.\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:\n"
        f"üíß –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É - –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        f"‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ—Ä–º—É - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É\n"
        f"‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞\n\n"
        f"–ñ–µ–ª–∞—é —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞! üíß",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.message(Command("testreminder"))
async def cmd_testreminder(message: types.Message):
    user_id = message.from_user.id
    current_time = datetime.now().strftime("%H:%M")
    
    try:
        await send_reminder(user_id, current_time)
        await message.answer("–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é –∏–∑ Google Sheets
    weekly_data, total_amount = get_weekly_stats(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É
    today = datetime.now().strftime("%Y-%m-%d")
    today_amount = 0
    
    if user_id in user_data:
        today_amount = user_data[user_id]["total_today"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ weekly_data
    today_in_stats = False
    for date, amount in weekly_data:
        if date == today:
            today_in_stats = True
            break
    
    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if not today_in_stats and today_amount > 0:
        weekly_data.append((today, today_amount))
        total_amount += today_amount
    
    if not weekly_data:
        await message.answer(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.\n"
            "–ù–∞—á–Ω–∏ –ø–∏—Ç—å –≤–æ–¥—É –∏ –æ—Ç–º–µ—á–∞—Ç—å —ç—Ç–æ –≤ –±–æ—Ç–µ!",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç—å—è –≤–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:*\n\n"
    
    for date, amount in weekly_data:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        try:
            formatted_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        except ValueError:
            formatted_date = date
        
        # –î–æ–±–∞–≤–ª—è–µ–º emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã
        emoji = "üî¥" if amount < 1000 else "üü°" if amount < 1500 else "üü¢"
        stats_text += f"{emoji} {formatted_date}: *{amount}* –º–ª\n"
    
    # –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤ –¥–µ–Ω—å
    avg_daily = total_amount / len(weekly_data) if weekly_data else 0
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text += f"\nüíß –í—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é: *{total_amount}* –º–ª"
    stats_text += f"\n‚öñÔ∏è –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: *{int(avg_daily)}* –º–ª"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    if avg_daily < 1000:
        stats_text += "\n\n‚ö†Ô∏è –¢—ã –ø—å–µ—à—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤–æ–¥—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ!"
    elif avg_daily < 1500:
        stats_text += "\n\nüîî –¢—ã –ø—å–µ—à—å –º–µ–Ω—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –Ω–æ—Ä–º—ã. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø–∏—Ç—å –±–æ–ª—å—à–µ!"
    elif avg_daily < 2000:
        stats_text += "\n\nüëç –ù–µ–ø–ª–æ—Ö–æ! –¢—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—à—å—Å—è –∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –Ω–æ—Ä–º–µ."
    else:
        stats_text += "\n\nüèÜ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å —Ö–æ—Ä–æ—à–∏–π –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å."
    
    await message.answer(stats_text, parse_mode="Markdown", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setnorm
@dp.message(Command("setnorm"))
async def cmd_setnorm(message: types.Message):
    args = message.text.split()
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
    init_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–∞ –ª–∏ –Ω–æ—Ä–º–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
    if len(args) > 1:
        try:
            new_norm = int(args[1])
            if new_norm <= 0:
                await message.answer("–ù–æ—Ä–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!", reply_markup=get_main_keyboard())
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –Ω–æ—Ä–º—É
            user_data[user_id]["daily_norm"] = new_norm
            await message.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {new_norm} –º–ª.", reply_markup=get_main_keyboard())
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ—Ä–º—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /setnorm 2500", reply_markup=get_main_keyboard())
    else:
        # –ï—Å–ª–∏ –Ω–æ—Ä–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        current_norm = user_data[user_id]["daily_norm"]
        await message.answer(
            f"–¢–µ–∫—É—â–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {current_norm} –º–ª.\n"
            f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setnorm —Å —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: /setnorm 2500",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /drink
@dp.message(Command("drink"))
async def cmd_drink(message: types.Message, state: FSMContext):
    await state.set_state(WaterForm.amount)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—ä–µ–º–∞
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="150 –º–ª", callback_data="amount_150"),
            types.InlineKeyboardButton(text="200 –º–ª", callback_data="amount_200"),
            types.InlineKeyboardButton(text="250 –º–ª", callback_data="amount_250")
        ],
        [
            types.InlineKeyboardButton(text="300 –º–ª", callback_data="amount_300"),
            types.InlineKeyboardButton(text="500 –º–ª", callback_data="amount_500"),
            types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="amount_custom")
        ]
    ])
    
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª(–∞)?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É"
@dp.message(lambda message: message.text == "üíß –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É")
async def button_drink(message: types.Message, state: FSMContext):
    await cmd_drink(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def button_stats(message: types.Message):
    await cmd_stats(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ—Ä–º—É"
@dp.message(lambda message: message.text == "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ—Ä–º—É")
async def button_setnorm(message: types.Message):
    user_id = message.from_user.id
    user = init_user_data(user_id)
    current_norm = user["daily_norm"]
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–æ—Ä–º
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="1500 –º–ª", callback_data="norm_1500"),
            types.InlineKeyboardButton(text="2000 –º–ª", callback_data="norm_2000"),
            types.InlineKeyboardButton(text="2500 –º–ª", callback_data="norm_2500")
        ],
        [
            types.InlineKeyboardButton(text="3000 –º–ª", callback_data="norm_3000"),
            types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="norm_custom")
        ]
    ])
    
    await message.answer(
        f"–¢–≤–æ—è —Ç–µ–∫—É—â–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {current_norm} –º–ª.\n"
        f"–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –Ω–æ—Ä–º—É –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def button_help(message: types.Message):
    user_name = message.from_user.first_name
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        f"–Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –æ –ø–∏—Ç—å–µ –≤–æ–¥—ã. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è "
        f"–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–≤–∞–ª(–∞) –ø–∏—Ç—å –≤–æ–¥—É.\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:\n"
        f"üíß –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É - –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        f"‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ—Ä–º—É - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É\n"
        f"‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞\n\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ - https://docs.google.com/spreadsheets/d/1fTTRnqbz0rUJ1cdt9TovPkROrYL5bnTUlepKPK9L5tU/edit?usp=sharing \n\n"
        f"–ñ–µ–ª–∞—é —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞! üíß",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–±—ä–µ–º–æ–º
@dp.callback_query(lambda c: c.data.startswith("amount_"))
async def process_amount_button(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    amount_str = callback.data.split("_")[1]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = init_user_data(user_id)
    
    if amount_str == "custom":
        await callback.message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –º–ª (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        await callback.answer()
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
    try:
        amount = int(amount_str)
        current_time = datetime.now()
        time_str = current_time.strftime("%H:%M")
        date_str = current_time.strftime("%Y-%m-%d")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥–µ
        user["today_logs"].append({
            "time": time_str,
            "date": date_str,
            "amount": amount,
            "status": "–≤—ã–ø–∏–ª"
        })
        user["total_today"] += amount
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã
        percent = (user["total_today"] / user["daily_norm"]) * 100
        
        await state.set_state(WaterForm.waiting)
        
        await callback.message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª {amount} –º–ª.\n\n"
            f"–°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–ø–∏–ª(–∞) –≤—Å–µ–≥–æ: {user['total_today']} –º–ª.\n"
            f"–≠—Ç–æ {percent:.1f}% –æ—Ç —Ç–≤–æ–µ–π –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã.",
            reply_markup=get_main_keyboard()
        )
        
        # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞
        if percent >= 100 and percent < 120:
            await callback.message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!")
        elif percent >= 120:
            await callback.message.answer("üí™ –í–∞—É! –¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª(–∞) —Å–≤–æ—é –Ω–æ—Ä–º—É –Ω–∞ 20% –∏ –±–æ–ª–µ–µ. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
    
    except ValueError:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –Ω–æ—Ä–º—ã
@dp.callback_query(lambda c: c.data.startswith("norm_"))
async def process_norm_button(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    norm_str = callback.data.split("_")[1]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = init_user_data(user_id)
    
    if norm_str == "custom":
        await callback.message.answer("–í–≤–µ–¥–∏ –∂–µ–ª–∞–µ–º—É—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –≤ –º–ª (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        await state.set_state(WaterForm.norm)
        await callback.answer()
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–π –Ω–æ—Ä–º—ã
    try:
        new_norm = int(norm_str)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –Ω–æ—Ä–º—É
        user["daily_norm"] = new_norm
        
        await callback.message.answer(
            f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {new_norm} –º–ª.",
            reply_markup=get_main_keyboard()
        )
    except ValueError:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –Ω–æ—Ä–º—ã
@dp.message(WaterForm.norm)
async def process_custom_norm(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = init_user_data(user_id)
    
    try:
        new_norm = int(message.text)
        if new_norm <= 0:
            await message.answer("–ù–æ—Ä–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –Ω–æ—Ä–º—É
        user["daily_norm"] = new_norm
        
        await state.set_state(WaterForm.waiting)
        
        await message.answer(
            f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {new_norm} –º–ª.",
            reply_markup=get_main_keyboard()
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.message(WaterForm.amount)
async def process_custom_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = init_user_data(user_id)
    
    try:
        amount = int(message.text)
        if amount <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            return
        
        current_time = datetime.now()
        time_str = current_time.strftime("%H:%M")
        date_str = current_time.strftime("%Y-%m-%d")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥–µ
        user["today_logs"].append({
            "time": time_str,
            "date": date_str,
            "amount": amount,
            "status": "–≤—ã–ø–∏–ª"
        })
        user["total_today"] += amount
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã
        percent = (user["total_today"] / user["daily_norm"]) * 100
        
        await state.set_state(WaterForm.waiting)
        
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª {amount} –º–ª.\n\n"
            f"–°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–ø–∏–ª(–∞) –≤—Å–µ–≥–æ: {user['total_today']} –º–ª.\n"
            f"–≠—Ç–æ {percent:.1f}% –æ—Ç —Ç–≤–æ–µ–π –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã.",
            reply_markup=get_main_keyboard()
        )
        
        # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞
        if percent >= 100 and percent < 120:
            await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!")
        elif percent >= 120:
            await message.answer("üí™ –í–∞—É! –¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª(–∞) —Å–≤–æ—é –Ω–æ—Ä–º—É –Ω–∞ 20% –∏ –±–æ–ª–µ–µ. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(user_id, time):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–∏—Ç—å–µ –≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = init_user_data(user_id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –Ω–æ—Ä–º—ã
    remaining = max(0, user["daily_norm"] - user["total_today"])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="–î–∞, –≤—ã–ø–∏–ª(–∞)", callback_data=f"drank_{time}"),
            types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"not_drank_{time}")
        ]
    ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
    message_text = f"üíß <b>–í—Ä–µ–º—è –ø–∏—Ç—å –≤–æ–¥—É!</b>\n\n–°–µ–π—á–∞—Å {time}.\n\n"
    
    if remaining > 0:
        message_text += f"–°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–ø–∏–ª(–∞): {user['total_today']} –º–ª.\n"
        message_text += f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –Ω–æ—Ä–º—ã: {remaining} –º–ª.\n\n"
    else:
        message_text += f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã —É–∂–µ –≤—ã–ø–∏–ª(–∞) –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É: {user['total_today']} –º–ª.\n\n"
    
    message_text += "–ù–µ –∑–∞–±—É–¥—å —É–≤–ª–∞–∂–Ω–∏—Ç—å—Å—è! –í—ã–ø–∏–ª(–∞) –≤–æ–¥—É?"
    
    try:
        await bot.send_message(
            user_id,
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ {time}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            plain_text = message_text.replace("<b>", "").replace("</b>", "")
            await bot.send_message(
                user_id,
                plain_text,
                reply_markup=keyboard,
                parse_mode=None
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        except Exception as e2:
            logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e2}")
            return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞, –≤—ã–ø–∏–ª(–∞)" –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
@dp.callback_query(lambda c: c.data.startswith("drank_"))
async def process_reminder_drank(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(reminder_time=callback.data.split("_")[1])
    await state.set_state(WaterForm.amount)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—ä–µ–º–∞
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="150 –º–ª", callback_data="amount_150"),
            types.InlineKeyboardButton(text="200 –º–ª", callback_data="amount_200"),
            types.InlineKeyboardButton(text="250 –º–ª", callback_data="amount_250")
        ],
        [
            types.InlineKeyboardButton(text="300 –º–ª", callback_data="amount_300"),
            types.InlineKeyboardButton(text="500 –º–ª", callback_data="amount_500"),
            types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="amount_custom")
        ]
    ])
    
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –º–ª –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª(–∞)?", reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–µ—Ç" –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
@dp.callback_query(lambda c: c.data.startswith("not_drank_"))
async def process_reminder_not_drank(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    time = callback.data.split("_")[1]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = init_user_data(user_id)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º –ø–∏—Ç—å–µ
    current_time = datetime.now()
    date_str = current_time.strftime("%Y-%m-%d")
    
    user["today_logs"].append({
        "time": time,
        "date": date_str,
        "amount": 0,
        "status": "–Ω–µ –≤—ã–ø–∏–ª"
    })
    
    await callback.message.answer(
        "–•–æ—Ä–æ—à–æ, —è –∑–∞–ø–∏—Å–∞–ª, —á—Ç–æ —Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª(–∞) —ç—Ç–æ—Ç –ø—Ä–∏–µ–º –≤–æ–¥—ã.\n"
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –ø–∏—Ç—å –≤–æ–¥—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞! üíß\n"
        "–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.message(Command("save"))
async def cmd_save(message: types.Message):
    user_id = message.from_user.id
    
    if user_id not in user_data or not user_data[user_id]["today_logs"]:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
        return
    
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        save_day_results(
            user_id,
            today,
            user_data[user_id]["total_today"],
            daily_norm=user_data[user_id]["daily_norm"]
        )
        await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")